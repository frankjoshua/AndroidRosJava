package com.tesseractmobile.pocketbot.amazonvoiceservice;

import retrofit.Callback;
import retrofit.RestAdapter;
import retrofit.RetrofitError;
import retrofit.client.Response;

/**
 * OAuth 2.0
 * Created by scottab on 07/07/15.
 */
public class AvsAPIAuthenticator {

    private final AvsAPIOAuth avsAPIOAuth;

    public AvsAPIAuthenticator() {
        
//        final RequestInterceptor requestInterceptor = new RequestInterceptor() {
//            @Override
//            public void intercept(final RequestFacade request) {
//                request.addHeader("Accept", "application/json");
//                request.addHeader("User-Agent", "meetup-checkin-app");
//                request.addEncodedQueryParam("Content-Type", "application/x-www-form-urlencoded");
//            }
//        };

        final RestAdapter restAdapter = new RestAdapter.Builder()
                .setEndpoint("https://api.amazon.com")
                .setLogLevel(RestAdapter.LogLevel.FULL)
                .build();

        avsAPIOAuth = restAdapter.create(AvsAPIOAuth.class);
    }


    public interface OAuthCallback{
        void success();
        void error(String msg);
    }

    /**
     * Once the authorization code is received on the product,<br>
     * the product should call Login with Amazon in order to exchange the authorization code for access<br>
     * and refresh tokens. When making the call,<br>
     * the product needs to send a POST request to<br>
     * https://api.amazon.com/auth/O2/token<br>
     * and pass in the following parameters:
     * @param authCode The authorization code received from the Android app.
     * @param redirectUri Call getRedirectUri() from your instance of the AmazonAuthorizationManager to get the redirect URI as a string.
     * @param clientId Call getClientId() from your instance of the AmazonAuthorizationManager to get the client ID as a string.
     * @param codeVerifier The code verifier that was initially generated by the product.
     * @param callback
     */
    public void getAccessToken(final String authCode, final String redirectUri, final String clientId, final String codeVerifier, final OAuthCallback callback){
        //workaround for retrofit not allowing blank body
        final String blankBody = "";
        avsAPIOAuth.getAccessToken("authorization_code", authCode, redirectUri, clientId, codeVerifier, blankBody, new Callback<AccessToken>() {
            @Override
            public void success(final AccessToken accessToken, final Response response) {
                saveToken(accessToken);
                if (callback != null) {
                    callback.success();
                }
            }

            @Override
            public void failure(final RetrofitError error) {
                if (callback != null) {
                    callback.error(error.getMessage());
                }
            }
        });

    }

//    public void refreshAccessToken(final OAuthCallback callback){
//        //workaround for retrofit not allowing blank body
//        String blankBody = "";
//        avsAPIOAuth.refreshAccessToken(Const.CONSUMER_KEY, Const.CONSUMER_SECRET, "refresh_token", prefs.getRefreshTonken(),blankBody, new Callback<AccessToken>() {
//            @Override
//            public void success(AccessToken accessToken, Response response) {
//                saveToken(accessToken);
//                if (callback != null) {
//                    callback.success();
//                }
//            }
//
//            @Override
//            public void failure(RetrofitError error) {
//                if (callback != null) {
//                    callback.error(error.getMessage());
//                }
//            }
//        });
//    }

    public void saveToken(final AccessToken accessToken){

        throw new UnsupportedOperationException("Not Implemented!");
    }

}

